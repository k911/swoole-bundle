#!/usr/bin/env bash

COVERAGE_DIR="cov"
COVERAGE_FILE="clover.xml"
REGISTRY="docker.io"
NAMESPACE="k911"
IMAGE_NAME="swoole-bundle"
IMAGE_WORKDIR="/usr/src/app"
IMAGE_APP_INSTALLER_TAG="app-installer"
IMAGE_EXT_BUILDER_TAG="ext-builder"
IMAGE_EXT_PCNTL_TAG="ext-pcntl"
IMAGE_EXT_XDEBUG_TAG="ext-xdebug"
IMAGE_EXT_INOTIFY_TAG="ext-inotify"
IMAGE_EXT_SWOOLE_TAG="ext-swoole"
IMAGE_BASE_TAG="base"
IMAGE_BASE_CLI_TAG="base-cli"
IMAGE_BASE_SERVER_TAG="base-server"
IMAGE_BASE_COVERAGE_TAG="base-coverage"
IMAGE_BASE_SERVER_COVERAGE_TAG="base-server-coverage"
IMAGE_BASE_WITH_XDEBUG_TAG="base-with-xdebug"
IMAGE_CLI_TAG="cli"
IMAGE_COMPOSER_TAG="composer"
IMAGE_COMPOSER_COVERAGE_TAG="composer-coverage"
IMAGE_SERVER_TAG="server"
IMAGE_SERVER_COVERAGE_TAG="server-coverage"

# DOCKER_USER=""
# DOCKER_PASSWORD=""

# echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin

# requires docker-ce 18.09
# export DOCKER_BUILDKIT=1


docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_APP_INSTALLER_TAG"

docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_BUILDER_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_SWOOLE_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_PCNTL_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_INOTIFY_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_XDEBUG_TAG"

docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_CLI_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_WITH_XDEBUG_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_COVERAGE_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_TAG"
docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_COVERAGE_TAG"

# docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_CLI_TAG"
# docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG"
# docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_COVERAGE_TAG"
# docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_TAG"
# docker pull "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_COVERAGE_TAG"

docker build --target Cli . \
    --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_CLI_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_BUILDER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_INOTIFY_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_PCNTL_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_SWOOLE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_XDEBUG_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_APP_INSTALLER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_CLI_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_WITH_XDEBUG_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_COVERAGE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_COVERAGE_TAG"

docker build --target Composer . \
    --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_BUILDER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_INOTIFY_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_PCNTL_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_SWOOLE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_XDEBUG_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_APP_INSTALLER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_CLI_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_WITH_XDEBUG_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_COVERAGE_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_TAG" \
    --cache-from "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_COVERAGE_TAG"

docker run "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG" cs-analyse
docker run "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG" static-analyse-src
docker run "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG" static-analyse-tests

rm -rf "$COVERAGE_DIR"
mkdir "$COVERAGE_DIR"

docker build -t "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_COVERAGE_TAG" . \
    --target ComposerCoverage

docker run -v "$(pwd)/$COVERAGE_DIR:$IMAGE_WORKDIR/$COVERAGE_DIR" "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_COVERAGE_TAG"

docker build -t "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_TAG" . \
    --target Server

docker run "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_TAG" -c ls

docker run "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_TAG"

docker build -t "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_COVERAGE_TAG" . \
    --target ServerCoverage

docker run -v "$(pwd)/$COVERAGE_DIR:$IMAGE_WORKDIR/$COVERAGE_DIR" "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_COVERAGE_TAG"

rm "$COVERAGE_FILE"
touch "$COVERAGE_FILE"
docker run -v "$(pwd)/$COVERAGE_DIR:$IMAGE_WORKDIR/$COVERAGE_DIR:ro" \
    -v "$(pwd)/$COVERAGE_FILE:$IMAGE_WORKDIR/$COVERAGE_FILE" \
    "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_COVERAGE_TAG" merge-code-coverage

docker build --target ext-builder --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_BUILDER_TAG" .
docker build --target ext-swoole --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_SWOOLE_TAG" .
docker build --target ext-pcntl --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_PCNTL_TAG" .
docker build --target ext-inotify --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_INOTIFY_TAG" .
docker build --target ext-xdebug --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_XDEBUG_TAG" .

docker build --target app-installer --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_APP_INSTALLER_TAG" .
docker build --target base --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_TAG" .
docker build --target base-cli --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_CLI_TAG" .
docker build --target base-with-xdebug --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_WITH_XDEBUG_TAG" .
docker build --target base-coverage --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_COVERAGE_TAG" .
docker build --target base-server --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_TAG" .
docker build --target base-server-coverage --tag "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_COVERAGE_TAG" .

docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_BUILDER_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_SWOOLE_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_PCNTL_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_INOTIFY_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_EXT_XDEBUG_TAG"

docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_APP_INSTALLER_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_CLI_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_WITH_XDEBUG_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_COVERAGE_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_BASE_SERVER_COVERAGE_TAG"

docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_CLI_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_COMPOSER_COVERAGE_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_TAG"
docker push "$REGISTRY/$NAMESPACE/$IMAGE_NAME:$IMAGE_SERVER_COVERAGE_TAG"
